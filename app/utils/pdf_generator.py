from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.graphics.shapes import Drawing
from reportlab.graphics.charts.lineplots import LinePlot
from reportlab.graphics.charts.barcharts import VerticalBarChart
from reportlab.graphics.widgets.markers import makeMarker
from reportlab.graphics import renderPDF
import io
from datetime import datetime
from reportlab.pdfbase import pdfdoc
from reportlab.platypus import Flowable

class PDFReportGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.setup_custom_styles()
    
    def setup_custom_styles(self):
        # Add custom styles only if they don't already exist to prevent errors on reload.
        if 'Title' not in self.styles:
            self.styles.add(ParagraphStyle(name='Title', parent=self.styles['h1'], fontSize=22, spaceAfter=20, alignment=1, textColor=colors.HexColor('#1E3A8A')))
        if 'SubTitle' not in self.styles:
            self.styles.add(ParagraphStyle(name='SubTitle', parent=self.styles['h2'], fontSize=16, spaceAfter=10, alignment=1, textColor=colors.HexColor('#4B5563')))
        if 'SectionHead' not in self.styles:
            self.styles.add(ParagraphStyle(name='SectionHead', parent=self.styles['h2'], fontSize=14, spaceBefore=12, spaceAfter=8, textColor=colors.HexColor('#1E3A8A'), borderBottomWidth=1, borderBottomColor=colors.HexColor('#DBEAFE'), paddingBottom=4))
        if 'Body' not in self.styles:
            self.styles.add(ParagraphStyle(name='Body', parent=self.styles['BodyText'], fontSize=10, leading=14, spaceAfter=10))
        if 'Small' not in self.styles:
            self.styles.add(ParagraphStyle(name='Small', parent=self.styles['BodyText'], fontSize=8, textColor=colors.gray))
        if 'Recommendation' not in self.styles:
            self.styles.add(ParagraphStyle(name='Recommendation', fontSize=18, alignment=1, spaceAfter=10))

    def _add_header_footer(self, canvas, doc):
        canvas.saveState()
        canvas.setFont('Helvetica', 8)
        canvas.setFillColor(colors.gray)
        # Footer
        canvas.drawString(inch, 0.75 * inch, f"Page {doc.page} | Generated by AGENSTOCK Research Agent")
        canvas.drawRightString(letter[0] - inch, 0.75 * inch, f"{datetime.utcnow().strftime('%Y-%m-%d')}")
        canvas.restoreState()

    def generate_enhanced_stock_report(self, stock_data: dict, analysis_data: dict, charts: list, research_response) -> bytes:
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter, rightMargin=inch, leftMargin=inch, topMargin=inch, bottomMargin=inch)
        story = []
        # Title and header
        story.append(Paragraph(f"<b>AGENSTOCK Research Report: {stock_data.get('company_name', 'N/A')} ({stock_data.get('symbol', '')})</b>", self.styles['Title']))
        story.append(Paragraph(f"Date: {datetime.utcnow().strftime('%B %d, %Y')}", self.styles['SubTitle']))
        story.append(Spacer(1, 0.3 * inch))

        # --- Table of Contents (simple) ---
        story.append(Paragraph("Table of Contents", self.styles['SectionHead']))
        toc_items = ["I. Executive Summary", "II. Data-CoT: Quantitative Insights", "III. Thesis-CoT: Qualitative Analysis", "IV. Risk-CoT: Key Risks", "V. Investment Recommendation", "VI. Multi-Level Explainable Summary", "VII. Peer Comparison", "VIII. CoT Traceability", "IX. Growth Potential"]
        toc_lines = "<br/>".join([f"{i+1}. {t}" for i, t in enumerate(toc_items)])
        story.append(Paragraph(toc_lines, self.styles['Body']))
        story.append(PageBreak())

        # helper Flowable to create bookmarks/outlines
        class _Bookmark(Flowable):
            def __init__(self, key, title, level=0):
                Flowable.__init__(self)
                self.key = key
                self.title = title
                self.level = level
            def draw(self):
                try:
                    self.canv.bookmarkPage(self.key)
                    self.canv.addOutlineEntry(self.title, self.key, level=self.level, closed=False)
                except Exception:
                    pass

        # --- Executive Summary ---
        story.append(_Bookmark('exec_summary', 'I. Executive Summary', level=0))
        story.append(Paragraph("I. Executive Summary", self.styles['SectionHead']))
        try:
            story.append(Paragraph(getattr(research_response, 'summary', '') or research_response.get('summary', ''), self.styles['Body']))
        except Exception:
            story.append(Paragraph('Executive summary not available.', self.styles['Body']))

        # --- Data-CoT: Quantitative Insights ---
        story.append(Paragraph("II. Data-CoT: Quantitative Insights", self.styles['SectionHead']))
        if research_response and getattr(research_response, 'metrics', None):
            # Build metrics table with derived signal
            metrics_data = [['Metric', 'Value', 'Signal']]
            def _derive_signal(key, val):
                def _parse_number(x):
                    try:
                        s = str(x).strip()
                        if s.endswith('%'):
                            return float(s.replace('%','')) / 100.0
                        mult = 1.0
                        if s.endswith('B'):
                            mult = 1e9
                            s = s[:-1]
                        elif s.endswith('M'):
                            mult = 1e6
                            s = s[:-1]
                        s = s.replace('$','').replace(',','')
                        valf = float(s) * mult
                        return valf
                    except Exception:
                        try:
                            return float(s)
                        except Exception:
                            return None

                v = _parse_number(val)
                if v is None:
                    return 'N/A'
                key = key.lower()
                if 'pe' in key:
                    if v < 15:
                        return 'Bullish'
                    elif v <= 30:
                        return 'Neutral'
                    else:
                        return 'Bearish'
                if 'eps' in key:
                    return 'Positive' if v > 0 else 'Negative'
                if 'market' in key or 'market_cap' in key:
                    try:
                        if v >= 1e12:
                            return 'Mega Cap'
                        elif v >= 1e10:
                            return 'Large Cap'
                        elif v >= 1e9:
                            return 'Mid Cap'
                        else:
                            return 'Small Cap'
                    except Exception:
                        return 'N/A'
                if 'dividend' in key:
                    return 'Income' if v > 0 else 'No Income'
                return 'N/A'

            metrics_obj = getattr(research_response, 'metrics', None) or research_response.get('metrics', {})
            for key, value in metrics_obj.items():
                signal = _derive_signal(key, value)
                metrics_data.append([key.replace('_', ' ').title(), str(value), signal])

            metrics_table = Table(metrics_data, colWidths=[2.5*inch, 2*inch, 1.5*inch])
            metrics_table.setStyle(self._get_table_style())
            story.append(metrics_table)
            story.append(Spacer(1, 0.2 * inch))

        # Add provided charts in a two-column layout with captions
        inserted_chart = False
        if charts and any(charts):
            col_width = 3*inch
            pending = []
            caption_style = self.styles['Small']
            for idx, chart_img in enumerate(charts):
                if not chart_img:
                    continue
                try:
                    img = Image(io.BytesIO(chart_img), width=col_width, height=2.2*inch)
                    caption = Paragraph(f"Figure {idx+1}: {stock_data.get('symbol','')} - Chart {idx+1}", caption_style)
                    cell_flow = [img, Spacer(1, 0.05*inch), caption]
                    pending.append(cell_flow)
                    # when we have two, render side-by-side
                    if len(pending) == 2:
                        t = Table([[pending[0], pending[1]]], colWidths=[col_width, col_width])
                        t.setStyle(TableStyle([('VALIGN',(0,0),(-1,-1),'TOP'), ('LEFTPADDING',(0,0),(-1,-1),6), ('RIGHTPADDING',(0,0),(-1,-1),6)]))
                        story.append(t)
                        story.append(Spacer(1, 0.12 * inch))
                        pending = []
                    inserted_chart = True
                except Exception:
                    continue
            if len(pending) == 1:
                # render single full-width
                story.extend(pending[0])
                story.append(Spacer(1, 0.12 * inch))

        # Generate advanced visuals using mplfinance (candlestick + volume + BB + MACD) if available
        try:
            import mplfinance as mpf
            import matplotlib.pyplot as plt
            import pandas as pd
            hist_df = None
            if hasattr(research_response, 'historical') and research_response.historical:
                try:
                    hist_df = pd.DataFrame.from_dict(research_response.historical, orient='index')
                except Exception:
                    hist_df = None
            elif isinstance(research_response, dict) and research_response.get('historical'):
                try:
                    hist_df = pd.DataFrame.from_dict(research_response.get('historical'), orient='index')
                except Exception:
                    hist_df = None

            if hist_df is not None and not hist_df.empty:
                cols = [c.lower() for c in hist_df.columns]
                def col_search(names):
                    for n in names:
                        if n in hist_df.columns:
                            return n
                        if n.lower() in cols:
                            for oc in hist_df.columns:
                                if oc.lower() == n.lower():
                                    return oc
                    return None

                open_col = col_search(['Open', 'open', '1. open'])
                high_col = col_search(['High', 'high', '2. high'])
                low_col = col_search(['Low', 'low', '3. low'])
                close_col = col_search(['Close', 'close', '4. close', 'adjclose', 'Adj Close'])
                vol_col = col_search(['Volume', 'volume', '5. volume'])

                if close_col and open_col and high_col and low_col:
                    df_mpf = hist_df[[open_col, high_col, low_col, close_col]].copy()
                    if vol_col and vol_col in hist_df.columns:
                        df_mpf['Volume'] = hist_df[vol_col]
                    df_mpf.columns = ['Open', 'High', 'Low', 'Close'] + (['Volume'] if 'Volume' in df_mpf.columns else [])
                    try:
                        df_mpf.index = pd.to_datetime(df_mpf.index)
                    except Exception:
                        pass

                    apds = []
                    try:
                        sma = df_mpf['Close'].rolling(window=20).mean()
                        std = df_mpf['Close'].rolling(window=20).std()
                        upper = sma + (std * 2)
                        lower = sma - (std * 2)
                        apds.append(mpf.make_addplot(upper, color='g'))
                        apds.append(mpf.make_addplot(lower, color='g'))
                    except Exception:
                        pass

                    try:
                        exp1 = df_mpf['Close'].ewm(span=12, adjust=False).mean()
                        exp2 = df_mpf['Close'].ewm(span=26, adjust=False).mean()
                        macd = exp1 - exp2
                        signal = macd.ewm(span=9, adjust=False).mean()
                        apds.append(mpf.make_addplot(macd, panel=1, color='fuchsia', ylabel='MACD'))
                        apds.append(mpf.make_addplot(signal, panel=1, color='b'))
                    except Exception:
                        pass

                    try:
                        buf_mpf = io.BytesIO()
                        mpf.plot(df_mpf, type='candle', style='yahoo', addplot=apds, volume=True, mav=(20,50), savefig=buf_mpf)
                        buf_mpf.seek(0)
                        story.append(Image(buf_mpf, width=6*inch, height=3.5*inch))
                        story.append(Spacer(1, 0.15 * inch))
                        inserted_chart = True
                    except Exception:
                        try:
                            fig, axlist = mpf.plot(df_mpf, type='candle', style='yahoo', addplot=apds, volume=True, mav=(20,50), returnfig=True)
                            buf2 = io.BytesIO()
                            fig.savefig(buf2, format='png', dpi=200)
                            buf2.seek(0)
                            story.append(Image(buf2, width=6*inch, height=3.5*inch))
                            story.append(Spacer(1, 0.15 * inch))
                            inserted_chart = True
                            plt.close(fig)
                        except Exception:
                            pass

                    try:
                        if hist_df is not None and close_col:
                            close_series = hist_df[close_col].astype(float)
                            delta = close_series.diff()
                            up = delta.clip(lower=0)
                            down = -1 * delta.clip(upper=0)
                            ma_up = up.ewm(com=13, adjust=False).mean()
                            ma_down = down.ewm(com=13, adjust=False).mean()
                            rs = ma_up / ma_down
                            rsi = 100 - (100 / (1 + rs))
                            buf_rsi = io.BytesIO()
                            plt.figure(figsize=(6,2))
                            plt.plot(rsi.index, rsi, color='#8338ec')
                            plt.title('RSI (14)')
                            plt.axhline(70, color='red', linestyle='--')
                            plt.axhline(30, color='green', linestyle='--')
                            plt.tight_layout()
                            plt.savefig(buf_rsi, format='png', dpi=200)
                            buf_rsi.seek(0)
                            story.append(Image(buf_rsi, width=6*inch, height=2*inch))
                            story.append(Spacer(1, 0.15 * inch))
                            inserted_chart = True
                            plt.close()
                    except Exception:
                        pass
        except Exception:
            # mplfinance / matplotlib not available; continue without advanced visuals
            pass

        # Generate a metrics bar chart as an additional visual (fallback when charts missing)
        try:
            if research_response and getattr(research_response, 'metrics', None):
                import matplotlib.pyplot as plt
                import numpy as np
                buf = io.BytesIO()
                keys = list((getattr(research_response, 'metrics', None) or research_response.get('metrics', {})).keys())[:6]
                vals = []
                for k in keys:
                    try:
                        v = float(str((getattr(research_response, 'metrics', None) or research_response.get('metrics', {}))[k]).replace('$','').replace('B','').replace('%',''))
                    except Exception:
                        v = 0.0
                    vals.append(v)
                plt.figure(figsize=(6,2.5))
                x = np.arange(len(keys))
                plt.bar(x, vals, color=['#3a86ff','#ff6363','#ffa600','#8338ec','#2ec4b6','#8ac926'][:len(keys)])
                plt.xticks(x, [k.replace('_',' ').title() for k in keys], rotation=45, ha='right')
                plt.title('Key Quantitative Metrics')
                plt.tight_layout()
                plt.savefig(buf, format='png', dpi=200)
                buf.seek(0)
                story.append(Image(buf, width=6*inch, height=2.5*inch))
                story.append(Spacer(1, 0.2 * inch))
                inserted_chart = True
                plt.close()
        except Exception:
            pass

        # --- Thesis-CoT: Qualitative Analysis ---
        story.append(Paragraph("III. Thesis-CoT: Qualitative Analysis", self.styles['SectionHead']))
        try:
            story.append(Paragraph(getattr(research_response, 'deep_dive', '') or research_response.get('deep_dive', ''), self.styles['Body']))
        except Exception:
            story.append(Paragraph('Deep dive not available.', self.styles['Body']))

        # --- Risk-CoT: Key Risks ---
        story.append(Paragraph("IV. Risk-CoT: Key Risks", self.styles['SectionHead']))
        if research_response and getattr(research_response, 'risks', None):
            if isinstance(getattr(research_response, 'risks', None), dict) and 'raw_text' in research_response.risks:
                story.append(Paragraph(research_response.risks['raw_text'], self.styles['Body']))
            elif hasattr(research_response.risks, 'risk_assessments'):
                risk_data = [['Category', 'Probability', 'Impact', 'Description']]
                for risk in research_response.risks.risk_assessments:
                    risk_data.append([risk.category.value, risk.probability.value, risk.impact.value, Paragraph(risk.description, self.styles['Body'])])
                risk_table = Table(risk_data, colWidths=[1*inch, 0.8*inch, 0.8*inch, 3.4*inch])
                risk_table.setStyle(self._get_table_style())
                story.append(risk_table)
                story.append(Spacer(1, 0.1 * inch))
                story.append(Paragraph("<b>Mitigation Insights:</b>", self.styles['Body']))
                story.append(Paragraph(research_response.risks.mitigation_insights, self.styles['Body']))

        # --- Investment Recommendation ---
        story.append(Paragraph("V. Investment Recommendation", self.styles['SectionHead']))
        if research_response and getattr(research_response, 'recommendation', None):
            rec = research_response.recommendation
            try:
                rec_color = self._get_recommendation_color(rec.recommendation.value)
            except Exception:
                rec_color = self._get_recommendation_color(getattr(rec, 'recommendation', ''))
            story.append(Paragraph(f"<b>Recommendation: <font color='{rec_color}'>{getattr(rec, 'recommendation', '')}</font> ({getattr(rec, 'confidence', '')} Confidence)</b>", self.styles['Recommendation']))
            rec_details = f"""
            <b>Target Price:</b> ${getattr(rec, 'target_price', {}).get('price', '')} (Upside: {getattr(getattr(rec, 'target_price', {}), 'upside_percentage', 0):.2f}% )<br/>
            <b>Method:</b> {getattr(getattr(rec, 'target_price', {}), 'calculation_method', '')}<br/>
            <b>Justification:</b> {getattr(rec, 'justification', '')}
            """
            story.append(Paragraph(rec_details, self.styles['Body']))

        # --- Multi-Level Explainable Summary ---
        story.append(Paragraph("VI. Multi-Level Explainable Summary", self.styles['SectionHead']))
        if research_response and getattr(research_response, 'multi_level_output', None):
            mlo = research_response.multi_level_output
            story.append(Paragraph(f"<b>Level 1 (TL;DR):</b> {getattr(mlo, 'level1_tldr', '')}", self.styles['Body']))
            highlights = "<b>Level 2 (Highlights):</b><br/>"
            if getattr(mlo, 'level2_highlights', None):
                highlights += "<b>Financial:</b><ul>" + "".join([f"<li>{item}</li>" for item in (mlo.level2_highlights.get('financial_highlights', []) if isinstance(mlo.level2_highlights, dict) else [])]) + "</ul>"
                highlights += "<b>Qualitative:</b><ul>" + "".join([f"<li>{item}</li>" for item in (mlo.level2_highlights.get('qualitative_highlights', []) if isinstance(mlo.level2_highlights, dict) else [])]) + "</ul>"
            story.append(Paragraph(highlights, self.styles['Body']))
            story.append(Paragraph(f"<b>Level 3 (Deep Dive):</b> {getattr(mlo, 'level3_deep_dive', '')}", self.styles['Body']))

        # --- Peer Comparison ---
        if research_response and getattr(research_response, 'peer_comparison', None):
            story.append(PageBreak())
            story.append(Paragraph("VII. Peer Comparison", self.styles['SectionHead']))
            if isinstance(research_response.peer_comparison, dict) and 'raw_text' in research_response.peer_comparison:
                story.append(Paragraph(research_response.peer_comparison['raw_text'].replace('\n', '<br/>'), self.styles['Body']))

        # --- CoT Trace Tree ---
        if research_response and getattr(research_response, 'cot_trace_tree', None):
            story.append(Paragraph("VIII. CoT Traceability", self.styles['SectionHead']))
            if isinstance(research_response.cot_trace_tree, dict) and 'raw_text' in research_response.cot_trace_tree:
                story.append(Paragraph(research_response.cot_trace_tree['raw_text'], self.styles['Body']))

        # Add other raw text sections
        if research_response and getattr(research_response, 'growth_potential', None) and 'raw_text' in research_response.growth_potential:
            story.append(Paragraph("IX. Growth Potential", self.styles['SectionHead']))
            story.append(Paragraph(research_response.growth_potential['raw_text'], self.styles['Body']))

        # Build document
        doc.build(story, onFirstPage=self._add_header_footer, onLaterPages=self._add_header_footer)
        buffer.seek(0)
        return buffer.getvalue()

    def _get_table_style(self):
        return TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#BFDBFE')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.HexColor('#1E3A8A')),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.HexColor('#EFF6FF')),
            ('GRID', (0, 0), (-1, -1), 1, colors.HexColor('#D1D5DB')),
            ('FONTSIZE', (0, 1), (-1, -1), 9),
        ])

    def _get_recommendation_color(self, recommendation: str) -> str:
        if recommendation == "BUY":
            return "green"
        elif recommendation == "SELL":
            return "red"
        else:
            return "orange"

    def generate_stock_report(self, stock_data: dict, analysis: dict, charts: list) -> bytes:
        """Generate simple stock research report (legacy)."""
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=letter)
        story = []
        
        story.append(Paragraph(f"Stock Research Report: {stock_data.get('symbol', 'Unknown')}", self.styles['Title']))
        story.append(Spacer(1, 0.2*inch))
        
        story.append(Paragraph("<b>Summary</b>", self.styles['SectionHead']))
        story.append(Paragraph(analysis.get('executive_summary', 'No summary available.'), self.styles['Body']))
        story.append(Spacer(1, 0.2*inch))

        if charts and charts[0]:
            img_buf = io.BytesIO(charts[0])
            img = Image(img_buf, width=5*inch, height=2.5*inch)
            story.append(Paragraph("<b>Stock Performance</b>", self.styles['SectionHead']))
            story.append(img)
            story.append(Spacer(1, 0.2*inch))

        story.append(Paragraph("<b>Key Metrics</b>", self.styles['SectionHead']))
        metrics_data = [["Metric", "Value"]]
        for key, value in analysis.get('metrics', {}).items():
            metrics_data.append([key.replace('_', ' ').title(), value])
        
        metrics_table = Table(metrics_data, colWidths=[2.5*inch, 2.5*inch])
        metrics_table.setStyle(self._get_table_style())
        story.append(metrics_table)
        story.append(Spacer(1, 0.2*inch))

        story.append(Paragraph("<b>Deep Dive Analysis</b>", self.styles['SectionHead']))
        story.append(Paragraph(analysis.get('deep_dive', 'No deep dive analysis available.'), self.styles['Body']))
        story.append(Spacer(1, 0.2*inch))

        story.append(Paragraph("<b>Risk Assessment</b>", self.styles['SectionHead']))
        story.append(Paragraph(analysis.get('risk_assessment', 'No risk assessment available.'), self.styles['Body']))
        story.append(Spacer(1, 0.2*inch))

        story.append(Paragraph("<b>Investment Recommendation</b>", self.styles['SectionHead']))
        recommendation = analysis.get('recommendation', {})
        rec_text = f"""
        <b>Rating:</b> {recommendation.get('rating', 'N/A')}<br/>
        <b>Target Price:</b> {recommendation.get('target_price', 'N/A')}<br/>
        <b>Confidence:</b> {recommendation.get('confidence', 'N/A')}<br/>
        {recommendation.get('reasoning', 'No reasoning provided.')}
        """
        story.append(Paragraph(rec_text, self.styles['Body']))

        doc.build(story, onFirstPage=self._add_header_footer, onLaterPages=self._add_header_footer)
        buffer.seek(0)
        return buffer.getvalue()