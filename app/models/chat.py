from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any, Union, Literal
from datetime import datetime
from enum import Enum

class MessageType(str, Enum):
    USER = "user"
    AI = "ai"
    SYSTEM = "system"

class ChatSession(BaseModel):
    id: str
    user_id: str
    title: str
    created_at: datetime
    updated_at: datetime
    message_count: int
    is_active: bool = True

class ChatMessage(BaseModel):
    id: str
    session_id: str
    message_type: MessageType
    content: str
    timestamp: datetime
    metadata: Optional[Dict[str, Any]] = None

class ResearchQuery(BaseModel):
    symbol: str
    query: str
    timeframe: Optional[str] = "1y"
    include_news: bool = True
    include_technical: bool = True

class RecommendationType(str, Enum):
    BUY = "BUY"
    HOLD = "HOLD"
    SELL = "SELL"

class ConfidenceLevel(str, Enum):
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"

class RiskLevel(str, Enum):
    LOW = "Low"
    MEDIUM = "Medium"
    HIGH = "High"

class RiskCategory(str, Enum):
    REGULATORY = "Regulatory"
    COMPETITIVE = "Competitive"
    MARKET = "Market"
    EXECUTION = "Execution"
    TECHNOLOGICAL = "Technological"
    ESG = "ESG"

class GrowthMetric(BaseModel):
    metric_name: str
    current_value: float
    previous_value: float
    growth_rate: float
    timeframe: str
    trend: str  # "up", "down", "stable"

class GrowthPotential(BaseModel):
    cagr_forecast: Dict[str, float]  # e.g., {"1y": 15.2, "5y": 12.8}
    revenue_growth_trend: List[GrowthMetric]
    eps_growth_trend: List[GrowthMetric]
    growth_drivers: List[str]
    growth_risks: List[str]

class TargetPrice(BaseModel):
    price: float
    upside_percentage: float
    calculation_method: str  # "DCF", "P/E Multiple", "Comparable Analysis"
    assumptions: Dict[str, Any]
    price_range: Dict[str, float]  # e.g., {"low": 120.5, "high": 150.2}

class PeerComparisonMetric(BaseModel):
    company: str
    ticker: str
    value: float
    industry_avg: Optional[float] = None
    signal: str  # "Positive", "Negative", "Neutral"

class PeerComparison(BaseModel):
    metrics: Dict[str, List[PeerComparisonMetric]]  # e.g., {"P/E": [metrics], "EPS Growth": [metrics]}
    analysis: str
    visual_data: Dict[str, Any]  # Data for charts

class TrendAnalytics(BaseModel):
    revenue: List[Dict[str, Union[str, float]]]
    net_income: List[Dict[str, Union[str, float]]]
    roe: List[Dict[str, Union[str, float]]]
    fcf: List[Dict[str, Union[str, float]]]
    timeframe: str  # "3y" or "1y"
    trend_analysis: str

class ValuationChart(BaseModel):
    chart_type: str  # "P/E Trendline", "Price vs Intrinsic Value"
    data: Dict[str, Any]
    insights: str

class RiskAssessment(BaseModel):
    category: RiskCategory
    probability: RiskLevel
    impact: RiskLevel
    description: str
    mitigation: Optional[str] = None

class RiskCoT(BaseModel):
    risk_heatmap: Dict[RiskCategory, Dict[str, RiskLevel]]  # e.g., {"Regulatory": {"probability": "HIGH", "impact": "MEDIUM"}}
    risk_assessments: List[RiskAssessment]
    mitigation_insights: Dict[str, str]
    visual_data: Dict[str, Any]  # Data for risk visualization

class CoTTraceTree(BaseModel):
    level1_summary: str
    level2_thesis_points: List[str]
    level3_supporting_evidence: Dict[str, List[str]]  # Maps thesis points to evidence
    data_provenance: Dict[str, str]  # Maps data points to sources

class VisualChart(BaseModel):
    chart_type: str
    title: str
    data: Dict[str, Any]
    insights: str

class MultiLevelOutput(BaseModel):
    level1_tldr: str
    level2_highlights: Dict[str, Any]
    level3_deep_dive: str
    level4_visuals_appendices: Dict[str, Any]

class InvestmentRecommendation(BaseModel):
    recommendation: RecommendationType
    target_price: TargetPrice
    confidence: ConfidenceLevel
    justification: str
    time_horizon: str  # e.g., "12 months", "3 years"
    key_catalysts: List[str]

class ResearchResponse(BaseModel):
    summary: str
    deep_dive: str
    metrics: Dict[str, Any]
    growth_potential: Optional[Any] = None
    peer_comparison: Optional[Any] = None
    trend_analytics: Optional[Any] = None
    valuation_charts: Optional[List[ValuationChart]] = None
    risks: Optional[Any] = None
    recommendation: Optional[InvestmentRecommendation] = None
    cot_trace_tree: Optional[Any] = None
    visual_charts: Optional[List[VisualChart]] = None
    multi_level_output: Optional[MultiLevelOutput] = None
    charts_suggestions: Optional[List[str]] = None
    generated_at: datetime
    source: str = "Generated by AGENSTOCK Conversational Research Agent"

class StockComparison(BaseModel):
    symbols: List[str]
    comparison_data: Dict[str, Any]
    analysis: str
    winner: Optional[str] = None